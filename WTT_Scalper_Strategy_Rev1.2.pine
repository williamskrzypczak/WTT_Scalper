//@version=5
strategy("WTT Scalper Strategy Rev1.2", shorttitle="WTT_Scalper_Strat_R1.2", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=2.0, initial_capital=10000)

// =============================================================================
// WaveRider Trading Technologies - WTT Scalper Trading Strategy
// =============================================================================
//
// REVISION HISTORY (Most Recent First):
// R1.3: Squeeze-Only Strategy - Converted to squeeze release signals only for higher quality entries
//       Removed traditional breakout signals, keeping only squeeze release entries. Changed visual
//       signals from circles to directional triangles for better clarity. Updated alerts to reflect
//       squeeze-only approach. Maintains all core functionality while focusing on volatility expansion
//       opportunities for improved signal quality and reduced noise.
// R1.2: Strategy Conversion - Converted indicator to strategy for backtesting
//       Added position management, risk controls, and strategy-specific features
//       Maintained all core WTT Scalper functionality while enabling automated trading
// R1.1: Fixed Plot Issues - Resolved "Undeclared identifier 'plot'" error
//       Simplified plot statements and improved code structure for better
//       Pine Script v5 compatibility. Maintained all functionality while
//       fixing parsing issues that prevented proper compilation.
// R1.0: Initial Release - Comprehensive Keltner Channel Trading System
//       Advanced Keltner Channel implementation with multiple timeframe support,
//       conservative entry/exit signals, comprehensive risk management, and
//       detailed performance tracking. Features include breakout detection,
//       squeeze identification, trend filtering, and dynamic stop loss/profit
//       target calculations. Designed for conservative trading approach with
//       multiple confirmation filters and comprehensive alert system.
//
// =============================================================================
// FEATURES:
// - Single-timeframe Keltner Channel analysis (simplified for reliability)
// - Squeeze release entry signals with volume confirmation
// - Squeeze detection and expansion alerts
// - Trend filtering with 50-period EMA (hardcoded)
// - Dynamic ATR-based stop loss and profit targets
// - Comprehensive performance tracking
// - Visual trade signals (triangles for squeeze releases only)
// - Streamlined alert system for key trading conditions
// - Risk management with ATR-based position sizing
// - Success rate and drawdown monitoring
// - Subtle squeeze indicators (tiny yellow squares)
// - Strategy-specific features for backtesting and automated trading
// =============================================================================

// INPUT SECTION
kc_length = input.int(20, title="KC Length", minval=1, group="Keltner Channel")
kc_multiplier = input.float(2.0, title="KC Multiplier", minval=0.1, step=0.1, group="Keltner Channel")
kc_ma_type = input.string("EMA", title="MA Type", options=["SMA", "EMA", "WMA", "HMA"], group="Keltner Channel")
kc_source = input.source(close, title="Source", group="Keltner Channel")

enable_volume_filter = input.bool(true, title="Volume Filter", tooltip="Require above average volume for signals", group="Trading")
volume_ma_length = input.int(20, title="Volume MA Length", minval=1, group="Trading")

atr_length = input.int(14, title="ATR Length", minval=1, group="Risk Management")
stop_loss_multiplier = input.float(1.5, title="Stop Loss ATR Multiplier", minval=0.1, step=0.1, group="Risk Management")
profit_target_multiplier = input.float(2.5, title="Profit Target ATR Multiplier", minval=0.1, step=0.1, group="Risk Management")
risk_percent = input.float(2.0, title="Risk Per Trade (%)", minval=0.1, maxval=10.0, step=0.1, group="Risk Management")

enable_squeeze = input.bool(true, title="Enable Squeeze Detection", group="Squeeze")
bb_length = input.int(20, title="Bollinger Bands Length", minval=1, group="Squeeze")
bb_multiplier = input.float(2.0, title="BB Multiplier", minval=0.1, step=0.1, group="Squeeze")

show_kc_bands = input.bool(true, title="Show KC Bands", group="Visual")
show_trend_ma = input.bool(false, title="Show Trend MA", group="Visual")
show_signals = input.bool(true, title="Show Trade Signals", group="Visual")
show_performance = input.bool(true, title="Show Performance Table", group="Visual")

// STRATEGY-SPECIFIC INPUTS
enable_strategy = input.bool(true, title="Enable Strategy Trading", group="Strategy")
max_positions = input.int(1, title="Max Concurrent Positions", minval=1, maxval=5, group="Strategy")
use_fixed_size = input.bool(false, title="Use Fixed Position Size", group="Strategy")
fixed_size = input.float(1000, title="Fixed Position Size ($)", minval=100, step=100, group="Strategy")
enable_pyramiding = input.bool(false, title="Enable Pyramiding", group="Strategy")
pyramid_limit = input.int(2, title="Pyramid Limit", minval=2, maxval=5, group="Strategy")

// CALCULATION SECTION
ma_function(src, length, ma_type) =>
    switch ma_type
        "SMA" => ta.sma(src, length)
        "EMA" => ta.ema(src, length)
        "WMA" => ta.wma(src, length)
        "HMA" => ta.hma(src, length)
        => ta.ema(src, length)

kc_ma = ma_function(kc_source, kc_length, kc_ma_type)
kc_range = ta.atr(kc_length) * kc_multiplier
kc_upper = kc_ma + kc_range
kc_lower = kc_ma - kc_range

trend_ma = ta.ema(close, 50)
is_uptrend = close > trend_ma
is_downtrend = close < trend_ma

volume_ma = ta.sma(volume, volume_ma_length)
volume_filter_long = enable_volume_filter ? volume > volume_ma : true
volume_filter_short = enable_volume_filter ? volume > volume_ma : true

atr_value = ta.atr(atr_length)

bb_basis = ta.sma(close, bb_length)
bb_dev = bb_multiplier * ta.stdev(close, bb_length)
bb_upper = bb_basis + bb_dev
bb_lower = bb_basis - bb_dev
is_squeeze = bb_upper < kc_upper and bb_lower > kc_lower
squeeze_release = is_squeeze[1] and not is_squeeze

// TRADING LOGIC
long_breakout = close > kc_upper and close[1] <= kc_upper[1]
short_breakout = close < kc_lower and close[1] >= kc_lower[1]

long_signal = long_breakout and is_uptrend and volume_filter_long and true
short_signal = short_breakout and is_downtrend and volume_filter_short and true

// Squeeze release signals only
long_signal_enhanced = squeeze_release and close > kc_ma and is_uptrend and volume_filter_long and true
short_signal_enhanced = squeeze_release and close < kc_ma and is_downtrend and volume_filter_short and true

// Exit conditions
long_exit = close < kc_ma or close < kc_lower
short_exit = close > kc_ma or close > kc_upper

// Position size calculation
calculate_position_size(entry_price, stop_price) =>
    if use_fixed_size
        fixed_size
    else
        risk_amount = strategy.equity * (risk_percent / 100)
        stop_distance = math.abs(entry_price - stop_price)
        position_size = risk_amount / stop_distance
        position_size

// STRATEGY EXECUTION
if enable_strategy
    // Long entry
    if long_signal_enhanced and strategy.position_size == 0
        long_stop_loss = close - (atr_value * stop_loss_multiplier)
        long_profit_target = close + (atr_value * profit_target_multiplier)
        pos_size = calculate_position_size(close, long_stop_loss)
        
        strategy.entry("Long", strategy.long, qty=pos_size, comment="WTT Long")
        strategy.exit("Long Exit", "Long", stop=long_stop_loss, limit=long_profit_target, comment="WTT Long Exit")
    
    // Short entry
    if short_signal_enhanced and strategy.position_size == 0
        short_stop_loss = close + (atr_value * stop_loss_multiplier)
        short_profit_target = close - (atr_value * profit_target_multiplier)
        pos_size = calculate_position_size(close, short_stop_loss)
        
        strategy.entry("Short", strategy.short, qty=pos_size, comment="WTT Short")
        strategy.exit("Short Exit", "Short", stop=short_stop_loss, limit=short_profit_target, comment="WTT Short Exit")
    
    // Pyramiding logic
    if enable_pyramiding
        pyramid_count = strategy.opentrades
        if long_signal_enhanced and strategy.position_size > 0 and pyramid_count < pyramid_limit
            long_stop_loss = close - (atr_value * stop_loss_multiplier)
            long_profit_target = close + (atr_value * profit_target_multiplier)
            pos_size = calculate_position_size(close, long_stop_loss)
            
            strategy.entry("Long Pyramid " + str.tostring(pyramid_count + 1), strategy.long, qty=pos_size, comment="WTT Long Pyramid")
            strategy.exit("Long Pyramid Exit " + str.tostring(pyramid_count + 1), "Long Pyramid " + str.tostring(pyramid_count + 1), stop=long_stop_loss, limit=long_profit_target, comment="WTT Long Pyramid Exit")
        
        if short_signal_enhanced and strategy.position_size < 0 and pyramid_count < pyramid_limit
            short_stop_loss = close + (atr_value * stop_loss_multiplier)
            short_profit_target = close - (atr_value * profit_target_multiplier)
            pos_size = calculate_position_size(close, short_stop_loss)
            
            strategy.entry("Short Pyramid " + str.tostring(pyramid_count + 1), strategy.short, qty=pos_size, comment="WTT Short Pyramid")
            strategy.exit("Short Pyramid Exit " + str.tostring(pyramid_count + 1), "Short Pyramid " + str.tostring(pyramid_count + 1), stop=short_stop_loss, limit=short_profit_target, comment="WTT Short Pyramid Exit")

// PLOTTING SECTION
orange_color = color.new(color.orange, 50)
purple_color = color.new(color.purple, 30)
fill_color = color.new(color.orange, 90)

upper_line = plot(show_kc_bands ? kc_upper : na, "KC Upper", orange_color, 2)
lower_line = plot(show_kc_bands ? kc_lower : na, "KC Lower", orange_color, 2)
middle_line = plot(show_kc_bands ? kc_ma : na, "KC Middle", purple_color, 1)

fill(upper_line, lower_line, fill_color)

plot(show_trend_ma ? trend_ma : na, "Trend MA", color.purple, 2)

// Squeeze release signals only
plotshape(show_signals and long_signal_enhanced, "Long Squeeze", shape.triangleup, location.belowbar, color.orange, size=size.small)
plotshape(show_signals and short_signal_enhanced, "Short Squeeze", shape.triangledown, location.abovebar, color.purple, size=size.small)

// SUBTLE SQUEEZE SQUARES
plotchar(is_squeeze, "SQUEEZE SQUARE", "■", location.top, color.new(color.yellow, 80), size=size.tiny, offset=0)
plotchar(is_squeeze, "SQUEEZE SQUARE", "■", location.bottom, color.new(color.yellow, 80), size=size.tiny, offset=0)

// Performance table
if show_performance and barstate.islast
    var table perf_table = table.new(position.top_right, 2, 10, bgcolor=color.new(color.black, 10), border_width=2, border_color=color.orange)
    table.cell(perf_table, 0, 0, "WTT Scalper Strategy", text_color=color.white, text_size=size.normal, bgcolor=color.orange)
    table.cell(perf_table, 1, 0, "", bgcolor=color.orange)
    table.cell(perf_table, 0, 1, "Total Trades", text_color=color.white, text_size=size.small, bgcolor=color.new(color.black, 0))
    table.cell(perf_table, 1, 1, str.tostring(strategy.closedtrades), text_color=color.lime, text_size=size.small, bgcolor=color.new(color.black, 20))
    table.cell(perf_table, 0, 2, "Win Rate", text_color=color.white, text_size=size.small, bgcolor=color.new(color.black, 0))
    win_rate = strategy.closedtrades > 0 ? (strategy.wintrades / strategy.closedtrades) * 100 : 0
    table.cell(perf_table, 1, 2, str.tostring(win_rate, "#.#") + "%", text_color=color.lime, text_size=size.small, bgcolor=color.new(color.black, 20))
    table.cell(perf_table, 0, 3, "Total P&L", text_color=color.white, text_size=size.small, bgcolor=color.new(color.black, 0))
    total_pnl_percent = (strategy.netprofit / strategy.initial_capital) * 100
    table.cell(perf_table, 1, 3, str.tostring(total_pnl_percent, "#.##") + "%", text_color=total_pnl_percent >= 0 ? color.lime : color.red, text_size=size.small, bgcolor=color.new(color.black, 20))
    table.cell(perf_table, 0, 4, "Max Drawdown", text_color=color.white, text_size=size.small, bgcolor=color.new(color.black, 0))
    max_dd_percent = (strategy.max_drawdown / strategy.initial_capital) * 100
    table.cell(perf_table, 1, 4, str.tostring(max_dd_percent, "#.##") + "%", text_color=color.red, text_size=size.small, bgcolor=color.new(color.black, 20))
    table.cell(perf_table, 0, 5, "Current Position", text_color=color.white, text_size=size.small, bgcolor=color.new(color.black, 0))
    position_text = strategy.position_size > 0 ? "LONG" : strategy.position_size < 0 ? "SHORT" : "FLAT"
    position_color = strategy.position_size > 0 ? color.orange : strategy.position_size < 0 ? color.fuchsia : color.silver
    table.cell(perf_table, 1, 5, position_text, text_color=position_color, text_size=size.small, bgcolor=color.new(color.black, 20))
    table.cell(perf_table, 0, 6, "Open Trades", text_color=color.white, text_size=size.small, bgcolor=color.new(color.black, 0))
    table.cell(perf_table, 1, 6, str.tostring(strategy.opentrades), text_color=color.lime, text_size=size.small, bgcolor=color.new(color.black, 20))
    table.cell(perf_table, 0, 7, "Squeeze Status", text_color=color.white, text_size=size.small, bgcolor=color.new(color.black, 0))
    squeeze_text = is_squeeze ? "ACTIVE" : "NONE"
    squeeze_color = is_squeeze ? color.yellow : color.silver
    table.cell(perf_table, 1, 7, squeeze_text, text_color=squeeze_color, text_size=size.small, bgcolor=color.new(color.black, 20))
    table.cell(perf_table, 0, 8, "Strategy Status", text_color=color.white, text_size=size.small, bgcolor=color.new(color.black, 0))
    strategy_text = enable_strategy ? "ACTIVE" : "DISABLED"
    strategy_color = enable_strategy ? color.lime : color.red
    table.cell(perf_table, 1, 8, strategy_text, text_color=strategy_color, text_size=size.small, bgcolor=color.new(color.black, 20))
    table.cell(perf_table, 0, 9, "Pyramiding", text_color=color.white, text_size=size.small, bgcolor=color.new(color.black, 0))
    pyramid_text = enable_pyramiding ? "ON" : "OFF"
    pyramid_color = enable_pyramiding ? color.lime : color.silver
    table.cell(perf_table, 1, 9, pyramid_text, text_color=pyramid_color, text_size=size.small, bgcolor=color.new(color.black, 20))

// ALERTS
if long_signal_enhanced
    alert("WTT Scalper Strategy: LONG signal at " + str.tostring(close, "#.##") + " | Check levels on chart", alert.freq_once_per_bar)

if short_signal_enhanced
    alert("WTT Scalper Strategy: SHORT signal at " + str.tostring(close, "#.##") + " | Check levels on chart", alert.freq_once_per_bar)

if is_squeeze and not is_squeeze[1]
    alert("WTT Scalper Strategy: SQUEEZE detected - Low volatility period, prepare for breakout", alert.freq_once_per_bar)

if squeeze_release
    alert("WTT Scalper Strategy: SQUEEZE RELEASE - Volatility expansion beginning", alert.freq_once_per_bar)
